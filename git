git команды

git help <название_команды> - документация конкретной команды
git config --global user.name “Имя Фамилия” - кофиг имени
git config --global user.email “Ваш email” - конфиг email

git init - обозначить папку где находишься для отслеживания git
git log - позволяет посмотреть всю историю коммитов
git add [файлы | .] - подготовить файлы и перевести в статус “staged”, [.] - добавляет все файлы

git commit -m “Сообщение снимка” - сделать коммит репозитория
git commit -a -m “Сообщение коммита” - то же самое, что последовательное выполнение git add . и git commit -m “Сообщение коммита”
git commit --amend -m “Совое сообщение коммита” - дополняет последний коммит, добавляя в него  “свежие” изменения. Также, меняет сообщение последнего коммита

git diff - Показывает разницу между текущим неотслеживаемым (unstaged) состоянием репозитория и последним снимком репозитория
git diff --staged показывает разницу между текущим отслеживаемым состоянием репозитория и последним снимком репозитория
git diff COMMIT_ID показывает разницу между текущим состоянием репозитория и указанным снимком репозитория

git reset [--soft | --mixed | --hard] [commit] - ([--mixed][HEAD] is default)
[commit] - Может быть хэш коммита (уникальный идентификатор) или различные вариации с HEAD (HEAD^^, HEAD~2 - вернуться на 2 коммита назад (пример))
[--hard] - Возвращает проект к указанному коммиту, при этом полностью удаляет все коммиты после указанного
[--mixed] - Возвращает проект к указанному коммиту, при этом переводит все коммиты после указанного в неотслеживаемую (unstaged) зону
[--soft] - Возвращает проект к указанному коммиту, при этом переводит все коммиты после указанного в отслеживаемую (staged) зону

git clean [-n | -f] - удаляет созданные (untracked) файлы
-n - отображает что будет удалено
-f - удаляет эти файлы

git checkout [commit | branch | master] -- [файл_1 файл_2] - переместиться к указанному коммиту и/или файлу
[commit] - Может быть хэш коммита (уникальный идентификатор) или различные вариации с HEAD (HEAD^^, HEAD~2 - вернуться на 2 коммита назад (пример))
[master] - название текущей ветки, возвращает к актуальному коммиту
[branch] - название ветки на которую хотим перейти
[файл_1 файл_2] - отдельные файлы состояние которых хотим посмотреть в указанных [commit]

git remote [-v] - просмотр списка существующих удаленных репозиториев
git remote add [НАЗВАНИЕ_РЕПОЗИТОРИЯ] [АДРЕС_РЕПОЗИТОРИЯ] - добавить новый удаленный репозиторий, который находится по указанному адресу. При этом, на нашем компьютере к удаленному репозиторию мы будем обращаться по его названию
git remote remove [НАЗВАНИЕ_РЕПОЗИТОРИЯ] - удалить привязку к удаленному репозиторию с указанным названием
git remote show [НАЗВАНИЕ_УДАЛЕННОГО_РЕПОЗИТОРИЯ] - показывает все удаленные ветки, а также локальные ветки и их актуальность относительно удаленных

git push [--delete] [НАЗВАНИЕ_УДАЛЕННОГО_РЕПОЗИТОРИЯ] [ЛОКАЛЬНАЯ_ВЕТКА] - команда для отправки локального репозитория на удаленный. пример: git push origin master
[--delete] - удаляет ветку в удаленном репозитории

git pull [НАЗВАНИЕ_УДАЛЕННОГО_РЕПОЗИТОРИЯ] [ЛОКАЛЬНАЯ_ВЕТКА] - команда для получения обновлений с удаленного репозитория.
git pull - это 1. git fetch + 2. git merge origin master - fetch скачивает удаленные ветки с удаленного репозитория (без слияния с локальными).
git clone [НАЗВАНИЕ_УДАЛЕННОГО_РЕПОЗИТОРИЯ] - позволяет быстро перенести в локальную папку удаленный репозиторий, вместо последовательности init, remote, pull.. 

git branch [название_ветки] - создание новой ветки. Без указания названия выведет на какой ветке находится указатель HEAD
git branch [-d] [название_ветки] - команда для удаления ветки
git branch [-r] - показывает локальные ссылки на удаленные ветки в удаленных репозиториях

git merge [название ветки] - указываем в ветке в которой находимся, что хотим в нее слить [название ветки]
git rebase [название ветки] - сливает ветку в которой находимся в ветку [название ветки]. При не fast-forward не создает коммитов слияния.
git rebase -i [commit] - позволяет редактировать коммиты начиная с указанного [commit]. Работает только с веткой, и коммитами, в которой сейчас находимся. Позволяет переименовывать, перемещать, редактировать коммиты и др.

git cherry-pick [--edit || --no-commit] [commit] - добавляет в конец ветки в которой находимся выборочный [commit] (можно указать не один) из другой ветки.
[--edit] - позволяет поменять сообщение переносимого коммита
[--no-commit] - переносит коммиты в отслеживаемую зону, без применения
